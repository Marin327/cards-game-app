import React, { useEffect, useState } from 'react';
import './App.css';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞ –∫–∞—Ä—Ç–∏—Ç–µ
const Card = ({ id, image, flipped, matched, onClick }) => (
  <div
    className={`card ${flipped ? 'flipped' : ''} ${matched ? 'matched' : ''}`}
    onClick={() => onClick(id)}
  >
    {flipped || matched ? image : '‚ùì'}
  </div>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞ –∏–≥—Ä–∞–ª–Ω–∞—Ç–∞ –¥—ä—Å–∫–∞
const Board = ({ deck, onCardClick }) => (
  <div className="board">
    {deck.map((card) => (
      <Card
        key={card.id}
        id={card.id}
        image={card.image}
        flipped={card.flipped}
        matched={card.matched}
        onClick={onCardClick}
      />
    ))}
  </div>
);

// –¢–∞–π–º–µ—Ä –∑–∞ –∏–≥—Ä–∞—Ç–∞
const Timer = ({ time }) => <p>–í—Ä–µ–º–µ: {time} —Å–µ–∫.</p>;

// –†–µ–∑—É–ª—Ç–∞—Ç –Ω–∞ –∏–≥—Ä–∞—á–∞
const Score = ({ moves }) => <p>–î–≤–∏–∂–µ–Ω–∏—è: {moves}</p>;

// –ë—É—Ç–æ–Ω –∑–∞ —Ä–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∏–≥—Ä–∞—Ç–∞
const RestartButton = ({ onRestart }) => (
  <button onClick={onRestart} className="btn restart-btn">–†–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–π</button>
);

// –ë—É—Ç–æ–Ω –∑–∞ –≤–∫–ª—é—á–≤–∞–Ω–µ –∏ –∏–∑–∫–ª—é—á–≤–∞–Ω–µ –Ω–∞ –∑–≤—É–∫–∞
const SoundButton = ({ onToggleSound }) => (
  <button onClick={onToggleSound} className="btn sound-btn">–ó–≤—É–∫</button>
);

// –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∑–∞ –∏–≥—Ä–∞—Ç–∞
const HelpModal = ({ isOpen, onClose }) => {
  if (!isOpen) return null;
  return (
    <div className="modal">
      <h3>–ö–∞–∫ –¥–∞ –∏–≥—Ä–∞–µ–º:</h3>
      <p>–¶–µ–ª—Ç–∞ –Ω–∞ –∏–≥—Ä–∞—Ç–∞ –µ –¥–∞ —Å—ä–≤–ø–∞–¥–Ω–µ—à –≤—Å–∏—á–∫–∏ –∫–∞—Ä—Ç–∏. –ö–ª–∏–∫–Ω–∏ –≤—ä—Ä—Ö—É –¥–≤–µ –∫–∞—Ä—Ç–∏, –∑–∞ –¥–∞ –≥–∏ –æ–±—ä—Ä–Ω–µ—à. –ê–∫–æ —Ç–µ —Å—ä–≤–ø–∞–¥–∞—Ç, —Ç–µ —â–µ –æ—Å—Ç–∞–Ω–∞—Ç –æ–±—ä—Ä–Ω–∞—Ç–∏. –ê–∫–æ –Ω–µ —Å—ä–≤–ø–∞–¥–∞—Ç, —Ç–µ —â–µ —Å–µ –æ–±—ä—Ä–Ω–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ —Å–ª–µ–¥ –º–∞–ª–∫–æ.</p>
      <button onClick={onClose} className="btn close-btn">–ó–∞—Ç–≤–æ—Ä–∏</button>
    </div>
  );
};

// –ò–∑–±–æ—Ä –Ω–∞ —Ç—Ä—É–¥–Ω–æ—Å—Ç
const DifficultySelect = ({ onDifficultyChange }) => (
  <select onChange={e => onDifficultyChange(e.target.value)} className="difficulty-select">
    <option value="easy">–õ–µ—Å–Ω–æ</option>
    <option value="medium">–°—Ä–µ–¥–Ω–æ</option>
    <option value="hard">–¢—Ä—É–¥–Ω–æ</option>
  </select>
);

// –°—ä—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –∏–≥—Ä–∞—Ç–∞
const GameStatus = ({ isGameOver, moves, time }) => (
  isGameOver ? <h2>–ò–≥—Ä–∞—Ç–∞ –ø—Ä–∏–∫–ª—é—á–∏! –ó–∞–≤—ä—Ä—à–∏ —Å {moves} –¥–≤–∏–∂–µ–Ω–∏—è –∏ {time} —Å–µ–∫—É–Ω–¥–∏.</h2> : null
);

// –ù–∞–π-–¥–æ–±—Ä–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
const Leaderboard = ({ bestScore }) => (
  <div className="leaderboard">
    <h3>–ù–∞–π-–¥–æ–±—Ä–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏:</h3>
    <p>–†–µ–∫–æ—Ä–¥: {bestScore} –¥–≤–∏–∂–µ–Ω–∏—è</p>
  </div>
);

const generateShuffledDeck = () => {
  const cardImages = [
    'üçé', 'üçé',
    'üçå', 'üçå',
    'üçá', 'üçá',
    'üçä', 'üçä',
    'üçâ', 'üçâ',
    'üçì', 'üçì',
    'üçí', 'üçí'
  ];

  const shuffledDeck = [...cardImages].sort(() => Math.random() - 0.5);
  return shuffledDeck.map((card, index) => ({
    id: index,
    image: card,
    flipped: false,
    matched: false,
  }));
};

const App = () => {
  const [deck, setDeck] = useState(generateShuffledDeck());
  const [flippedIndices, setFlippedIndices] = useState([]);
  const [moves, setMoves] = useState(0);
  const [matchedCount, setMatchedCount] = useState(0);
  const [timer, setTimer] = useState(0);
  const [isSoundOn, setIsSoundOn] = useState(true);
  const [isGameOver, setIsGameOver] = useState(false);
  const [bestScore, setBestScore] = useState(localStorage.getItem('bestScore') || 0);
  const [difficulty, setDifficulty] = useState('medium');
  const [isHelpOpen, setIsHelpOpen] = useState(false);

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–∏—Ç–µ
  const handleCardClick = (index) => {
    if (flippedIndices.length === 2 || deck[index].flipped || deck[index].matched) return;

    const newDeck = [...deck];
    newDeck[index].flipped = true;
    setDeck(newDeck);

    setFlippedIndices((prev) => [...prev, index]);
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ —Å—ä–≤–ø–∞–¥–µ–Ω–∏–µ
  useEffect(() => {
    if (flippedIndices.length === 2) {
      setMoves(moves + 1);
      const [firstIndex, secondIndex] = flippedIndices;
      const newDeck = [...deck];

      if (newDeck[firstIndex].image === newDeck[secondIndex].image) {
        newDeck[firstIndex].matched = true;
        newDeck[secondIndex].matched = true;
        setMatchedCount(matchedCount + 2);
      } else {
        setTimeout(() => {
          newDeck[firstIndex].flipped = false;
          newDeck[secondIndex].flipped = false;
          setDeck(newDeck);
        }, 1000);
      }

      setFlippedIndices([]);
    }
  }, [flippedIndices, deck, moves, matchedCount]);

  // –¢–∞–π–º–µ—Ä
  useEffect(() => {
    const interval = setInterval(() => setTimer(prev => prev + 1), 1000);
    return () => clearInterval(interval);
  }, []);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –∏–≥—Ä–∞—Ç–∞ –µ –∑–∞–≤—ä—Ä—à–µ–Ω–∞
  useEffect(() => {
    if (matchedCount === deck.length) {
      setIsGameOver(true);
      if (moves < bestScore || !bestScore) {
        setBestScore(moves);
        localStorage.setItem('bestScore', moves);
      }
    }
  }, [matchedCount, deck, moves, bestScore]);

  // –ü—Ä–æ–º—è–Ω–∞ –Ω–∞ —Ç—Ä—É–¥–Ω–æ—Å—Ç
  useEffect(() => {
    if (difficulty === 'easy') {
      setDeck(generateShuffledDeck().slice(0, 12)); // –õ–µ—Å–Ω–æ - 6 –∫–∞—Ä—Ç–∏
    } else if (difficulty === 'medium') {
      setDeck(generateShuffledDeck().slice(0, 16)); // –°—Ä–µ–¥–Ω–æ - 8 –∫–∞—Ä—Ç–∏
    } else if (difficulty === 'hard') {
      setDeck(generateShuffledDeck()); // –¢—Ä—É–¥–Ω–æ - 12 –∫–∞—Ä—Ç–∏
    }
    setMatchedCount(0);
    setMoves(0);
    setIsGameOver(false);
  }, [difficulty]);

  const toggleSound = () => setIsSoundOn(!isSoundOn);

  const restartGame = () => {
    setDeck(generateShuffledDeck());
    setMatchedCount(0);
    setMoves(0);
    setIsGameOver(false);
    setTimer(0);
    setFlippedIndices([]);
  };

  return (
    <div className="App">
      <h1>–ò–≥—Ä–∞ –∑–∞ –ø–∞–º–µ—Ç</h1>

      <Score moves={moves} />
      <Timer time={timer} />
      <Leaderboard bestScore={bestScore} />
      <GameStatus isGameOver={isGameOver} moves={moves} time={timer} />
      <RestartButton onRestart={restartGame} />
      <SoundButton onToggleSound={toggleSound} />
      <DifficultySelect onDifficultyChange={setDifficulty} />
      <HelpModal isOpen={isHelpOpen} onClose={() => setIsHelpOpen(false)} />

      <Board deck={deck} onCardClick={handleCardClick} />

      <button onClick={() => setIsHelpOpen(true)} className="btn help-btn">–ü–æ–º–æ—â</button>
    </div>
  );
};

export default App;
